Redux store: Json/ central state

Redux action: 
    These are Joson objects that consit of two things.
    action type which is just a string naming the action
    and payload of additional data
    {type, payload}
    its purpose is to explicitly define the different events that can occure in our app.

    example:
        Redux action type USER_DATA_LOADED with payload of user data we fetch from a server
        Redux action type ITEM_ADDED_TO_CART payload with ites ids user added to chart

    we can have many of these action.. the point is we explicitly define them so you can controll them 



Reducers: specifies what should happen to our Redux store when an action is triggered

USER_DATA_LOADED -> REDUCERS -> user: { ... }
ITEM_ADDED_TO_CART -> REDUCERS -> shoppingcart: [ ... ]


Components can only interact with the state by triggeresing Redux actions
This is a unidirectional data flow

        â®£ ðŸ ¢ ðŸ ¢ --UI triggers action  â®§
        ðŸ ¡                             â­£
Components see updated state ðŸ   ðŸ  State is updated 



after we create reducer.js and actions.js
import the reducer we created to the store.js and add it to the reducer object. 

so far we have defined some of the possible actions that could happen in our app 
and the effects on effects they should have on the state of our app when triggered

now we need to give these components in our app access to the redux store
so they can see what the current state is, as well as trigger actions that modifiy the state

so we connect these components to the redux store 

look at ./src/todos/NewTodoForm.js
we import {connect} from 'react-redux'

connect is a higher order function (its called with 2 different sets of arguments) example: connect()()

we will create the following 
const mapStateToProps = (state) => ({
  todos: state.todos,
});

const mapDispatchToProps = (dispatch) => ({
  onCreatePressed: (text) => dispatch(createTodo(text)),
});

and then import:
import { connect } from "react-redux";
import { createTodo } from "./actions";

and we can create some behaviors on our button
<button
    onClick={() => {
        const isDuplicateText = todos.some(
            (todo) => todo.text === inputValue);
        if (!isDuplicateText) {
            onCreatePressed(inputValue);
            setInputValue("");
        }
    }}
    className="new-todo-button"
    >
        Create Todo
</button>
 


now we need to update our todolist.js component
import { connect } from "react-redux";

update our export:
export default connect(mapStateToProps, mapDispatchToProps)(TodoList);

create our maps:
const mapStateToProps = (state) => ({
  todos: state.todos,
});

const mapDispatchToProps = (dispatch) => ({
  onRemovePressed: (text) => dispatch(removeTodo(text)),
});

dont forget to 
import { removeTodo } from "./actions";


now our todoList.js is connected to the redux store

its important to know that we dont always use a mapStateToProps or mapDispatchToProps
many instances will occure when we really only need one of these. if so we only define the one we need and connect with it

this would look lke this 
//if we only need mapStateToProps
export default connect(mapStateToProps)(TodoList);
or this
//if we only need mapDispatchToProps
export default connect(null, mapDispatchToProps)(TodoList);


look at our files for context clues on how this program was made...
at this stage we should have a fuctional app
but we will notice that once we refresh the page, our list is refreshed and gone

lets install redux-persist 

we will need to make some changes to store.js and index.js

///////////////////
deleting the persist
//////////////////
adding this might cause a perma crash durring development..
we need to delete the persited data from local storge or whereever you are storing it 
in our browser... open up inspect -> application tab -> storage/localstorage/localhost
you should hopfully see persist:root....clear or delete that
refresh the app... you should see we have a fresh state. :D




////////////////
chrome extention
/////////////////


adding redux-dev tools in chrome
in store.js add:
window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),

inside:
export const configureStore = () =>
  createStore(
    persistedReducer,
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
  );







  //////////////
  best practices 
  //////////////

  When we connect components to the redux store, make sure our files 
  Export both the connected and unconnected versions of a component 

  the reason for this is that the connectde version of our component is usually what the rest of our app will wnt to use
   but when testing our components, it will make our life easy to test the component as is 
   our tests shouldnt care whether our components are connecte or not 
   we should simple see if the components render the correct JS given the specific set of props

   We should never trigger any other actions from side our reducers or perform any async operations like fetching data from a network 
   Keep Redux actions and async operations OUT OF YOUR REDUCERS!!!!
    Remember that reducers are specifically ment to to take the curent state of the redux store and combind it with an action to 
    get the updated state. thats it

    Think carefully about connecting components
    connecting a component to the redux store, in practice, makes it less reusable

   